---
openapi: 3.0.3
info:
 title: onecx-iam-svc internal service
 description: This API provides endpoints to perform operations on the Identity Management like Keycloak
 version: 1.0.0
servers:
 - url: "http://onecx-iam-svc:8080"
tags:
 - name: UsersInternal
   description: Managing the requesting users IDM account
 - name: adminInternal
   description: Managing users of the used IDM
paths:
 /internal/admin/users/search:
  post:
   security:
    - oauth2: [ ocx-ia:all, ocx-ia:read ]
   tags:
    - AdminInternal
   description: Search users by search criteria
   operationId: searchUsersByCriteria
   requestBody:
    required: true
    content:
     application/json:
      schema:
       $ref: '#/components/schemas/UserSearchCriteria'
   responses:
    200:
     description: User search results retrieved successfully
     content:
      "application/json":
       schema:
        $ref: "#/components/schemas/UserPageResult"
    400:
     description: Bad request
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/ProblemDetailResponse'
 /internal/admin/users:
  post:
   security:
    - oauth2: [ ocx-ia:all, ocx-ia:write ]
   tags:
    - AdminInternal
   description: Create a new user in the used identity management system
   operationId: createUser
   requestBody:
    required: true
    content:
     application/json:
      schema:
       $ref: '#/components/schemas/CreateUserRequest'
   responses:
    201:
     description: User created successfully
    400:
     description: Bad request
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/ProblemDetailResponse'
 /internal/admin/users/{userId}:
  put:
   security:
    - oauth2: [ ocx-ia:all, ocx-ia:write ]
   tags:
    - AdminInternal
   description: Update a user by its id
   operationId: updateUser
   parameters:
    - name: userId
      in: path
      required: true
      description: Keycloak userId
      schema:
       type: string
   requestBody:
    required: true
    content:
     application/json:
      schema:
       $ref: '#/components/schemas/UpdateUserRequest'
   responses:
    204:
     description: User updated successfully
    400:
     description: Bad request
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/ProblemDetailResponse'
 /internal/admin/{userId}/roles:
  post:
   security:
    - oauth2: [ ocx-ia:all, ocx-ia:read ]
   tags:
    - AdminInternal
   description: Get all roles assigned to a user by its id
   operationId: getUserRoles
   parameters:
    - name: userId
      in: path
      required: true
      description: Keycloak userId
      schema:
       type: string
   requestBody:
    content:
     "application/json":
      schema:
       $ref: '#/components/schemas/UserRolesSearchRequest'
   responses:
    200:
     description: Roles retrieved successfully
     content:
      "application/json":
       schema:
        $ref: '#/components/schemas/UserRolesResponse'
    400:
     description: Bad request
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/ProblemDetailResponse'
 /internal/admin/{userId}/roles/assign:
  post:
   security:
    - oauth2: [ ocx-ia:all, ocx-ia:write ]
   tags:
    - AdminInternal
   description: Assign roles to user by its id
   operationId: assignUserRole
   parameters:
    - name: userId
      in: path
      required: true
      description: Keycloak userId
      schema:
       type: string
   requestBody:
    content:
     "application/json":
      schema:
       $ref: '#/components/schemas/RoleAssignmentRequest'
   responses:
    204:
     description: User roles updated successfully
    400:
     description: Bad request
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/ProblemDetailResponse'
 /internal/admin/roles/search:
  post:
   security:
    - oauth2: [ ocx-ia:all, ocx-ia:read ]
   tags:
    - AdminInternal
   description: Search roles by search criteria
   operationId: searchRolesByCriteria
   requestBody:
    required: true
    content:
     application/json:
      schema:
       $ref: '#/components/schemas/RoleSearchCriteria'
   responses:
    200:
     description: Role search results retrieved successfully
     content:
      "application/json":
       schema:
        $ref: "#/components/schemas/RolePageResult"
    400:
     description: Bad request
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/ProblemDetailResponse'
 /internal/admin/roles:
  post:
   security:
    - oauth2: [ ocx-ia:all, ocx-ia:write ]
   tags:
    - AdminInternal
   description: Create a new role in the used identity management system
   operationId: createRole
   requestBody:
    required: true
    content:
     application/json:
      schema:
       $ref: '#/components/schemas/CreateRoleRequest'
   responses:
    201:
     description: Role created successfully
    400:
     description: Bad request
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/ProblemDetailResponse'
 /internal/admin/providers:
  get:
   security:
    - oauth2: [ ocx-ia:all, ocx-ia:read ]
   tags:
    - AdminInternal
   description: Get a list of all registered providers (instances of identity management systems)
   operationId: getAllProviders
   responses:
    200:
     description: Providers retrieved successfully
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/ProvidersResponse'
    400:
     description: Bad request
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/ProblemDetailResponse'
 /internal/me/password:
  put:
   security:
    - oauth2: [ ocx-ia:all, ocx-ia:write ]
   tags:
    - UserInternal
   description: Reset the password of the requesting user
   operationId: resetPassword
   requestBody:
    required: true
    content:
     application/json:
      schema:
       $ref: '#/components/schemas/UserResetPasswordRequest'
   responses:
    204:
     description: Password resetted successfully
    400:
     description: Bad request
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/ProblemDetailResponse'
 /internal/me/provider:
  get:
   security:
    - oauth2: [ ocx-ia:all, ocx-ia:read ]
   tags:
    - UserInternal
   description: Get the current used provider of the requesting user
   operationId: getUserProvider
   responses:
    200:
     description: Provider retrieved successfully
     content:
      "application/json":
       schema:
        $ref: '#/components/schemas/ProvidersResponse'
    400:
     description: Bad request
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/ProblemDetailResponse'
components:
 securitySchemes:
  oauth2:
   type: oauth2
   flows:
    clientCredentials:
     tokenUrl: https://oauth.simple.api/token
     scopes:
      ocx-ia:all: Grants access to all operations
      ocx-ia:read: Grants read access
      ocx-ia:write: Grants write access
 schemas:
  UserRolesSearchRequest:
   type: object
   properties:
    issuer:
     type: string
  ProvidersResponse:
   type: object
   properties:
    providers:
     type: array
     items:
      $ref: '#/components/schemas/Provider'
  Provider:
   type: object
   properties:
    name:
     type: string
    displayName:
     type: string
    description:
     type: string
    fromToken:
     type: boolean
    domains:
     type: array
     items:
      $ref: '#/components/schemas/Domain'
  Domain:
   type: object
   properties:
    name:
     type: string
    displayName:
     type: string
    issuer:
     type: string
  UserRolesResponse:
   type: object
   properties:
    roles:
     type: array
     items:
      $ref: '#/components/schemas/Role'
  UserSearchCriteria:
   type: object
   properties:
    userName:
     type: string
    firstName:
     type: string
    lastName:
     type: string
    userId:
     type: string
    email:
     type: string
    issuer:
     type: string
    pageNumber:
     format: int32
     description: The number of page.
     default: 0
     type: integer
    pageSize:
     format: int32
     description: The size of page
     default: 100
     maximum: 1000
     type: integer
  UserPageResult:
   type: object
   properties:
    totalElements:
     format: int64
     description: The total elements in the resource.
     type: integer
    number:
     format: int32
     type: integer
    size:
     format: int32
     type: integer
    totalPages:
     format: int64
     type: integer
    stream:
     type: array
     items:
      $ref: '#/components/schemas/User'
  CreateRoleRequest:
   type: object
   required:
    - issuer
    - name
   properties:
    issuer:
     type: string
    name:
     type: string
    description:
     type: string
  RoleAssignmentRequest:
   type: object
   required:
    - issuer
    - name
   properties:
    issuer:
     type: string
    names:
     type: array
     items:
      type: string
  CreateUserRequest:
   type: object
   required:
    - issuer
    - username
    - firstName
    - lastName
    - email
    - temporaryPassword
   properties:
    issuer:
     type: string
    username:
     type: string
    firstName:
     type: string
    lastName:
     type: string
    email:
     type: string
    temporaryPassword:
     type: string
    attributes:
     type: object
     additionalProperties:
      type: array
      items:
       type: string
  UpdateUserRequest:
   type: object
   required:
    - issuer
   properties:
    issuer:
     type: string
    firstName:
     type: string
    lastName:
     type: string
    email:
     type: string
    attributes:
     type: object
     additionalProperties:
      type: array
      items:
       type: string
  User:
   type: object
   properties:
    id:
     type: string
    origin:
     type: string
    provider:
     type: string
    domain:
     type: string
    createdTimestamp:
     $ref: '#/components/schemas/OffsetDateTime'
    username:
     type: string
    firstName:
     type: string
    lastName:
     type: string
    email:
     type: string
    attributes:
     type: object
     additionalProperties:
      type: array
      items:
       type: string
  UserResetPasswordRequest:
   type: object
   required:
    - password
   properties:
    password:
     type: string
     format: password
     minLength: 1
  ProblemDetailResponse:
   type: object
   properties:
    errorCode:
     type: string
    detail:
     type: string
    params:
     type: array
     items:
      $ref: '#/components/schemas/ProblemDetailParam'
    invalidParams:
     type: array
     items:
      $ref: '#/components/schemas/ProblemDetailInvalidParam'
  RoleSearchCriteria:
   type: object
   properties:
    name:
     type: string
    issuer:
     type: string
    pageNumber:
     format: int32
     description: The number of page.
     default: 0
     type: integer
    pageSize:
     format: int32
     description: The size of page
     default: 100
     maximum: 1000
     type: integer
  RolePageResult:
   type: object
   properties:
    totalElements:
     format: int64
     description: The total elements in the resource.
     type: integer
    number:
     format: int32
     type: integer
    size:
     format: int32
     type: integer
    totalPages:
     format: int64
     type: integer
    stream:
     type: array
     items:
      $ref: '#/components/schemas/Role'
  Role:
   type: object
   properties:
    name:
     type: string
    description:
     type: string
  ProblemDetailParam:
   type: object
   properties:
    key:
     type: string
    value:
     type: string
  ProblemDetailInvalidParam:
   type: object
   properties:
    name:
     type: string
    message:
     type: string
  OffsetDateTime:
   format: date-time
   type: string
   example: 2022-03-10T12:15:50-04:00
